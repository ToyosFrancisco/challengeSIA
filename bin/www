#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('websocket:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = require('socket.io')(server);
let connectedClients = [];
let state = {
  isPlaying: false,
  ts: 0,
  comment: ''
};

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * socket handlers
 */
io.on('connection', _onClientConnect);


/**
 * socket handler definition
 */
function _onClientConnect(client) {
  // io.emit (brodcast a todos los clientes)
  // client.emit (unicast al client id)

  console.log('cliente ', client.id, ' se conecta');
  connectedClients.push(client.id);

  // server emits
  client.emit('state', state);

  // custom events
  // client.on('testing', (msg) => console.log(msg));
  client.on('play', _handlerPlay);
  client.on('stop', _handlerStop);
  client.on('goTo', _handleGoTo);


  // disconnect
  client.on('disconnect', () => _onClientDisconnect(client.id));
}

function _onClientDisconnect(id) {
  console.log('cliente ', id, ' se desconecta');
  connectedClients = connectedClients.filter((clientId) => clientId !== id);
}

function _handlerPlay() {
  state.isPlaying = true;
  io.emit('state', state);
}

function _handlerStop(timestamp) {
  state.isPlaying = false;
  state.ts = parseInt(timestamp);
  io.emit('state', state);
}

function _handleGoTo(timestamp) {
  state.isPlaying = true;
  state.ts = parseInt(timestamp);
  io.emit('state', state);
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
